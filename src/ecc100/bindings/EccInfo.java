package ecc100.bindings;

import org.bridj.BridJ;
import org.bridj.Pointer;
import org.bridj.StructObject;
import org.bridj.ann.Field;
import org.bridj.ann.Library;

/**
 * @brief Information about a discovered device<br>
 *        <i>native declaration : lib\ecc100\ecc.h:91</i><br>
 *        This file was autogenerated by
 *        <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 *        a tool written by <a href="http://ochafik.com/">Olivier Chafik</a>
 *        that <a href=
 *        "http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few
 *        opensource projects.</a>.<br>
 *        For help, please visit
 *        <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a>
 *        or <a href="http://bridj.googlecode.com/">BridJ</a> .
 */
@Library("ecc")
public class EccInfo extends StructObject {
  static { BridJ.register(); }

  /** < Programmed ID of the device */
  @Field(0)
  public int id() {
    return this.io.getIntField(this, 0);
  }

  /** < Programmed ID of the device */
  @Field(0)
  public EccInfo id(int id)
  {
    this.io.setIntField(this, 0, id);
    return this;
  }

  /**
   * < Device locked by other program<br>
   * C type : Bln32
   */
  @Field(1)
  public int locked() {
    return this.io.getIntField(this, 1);
  }

  /**
   * < Device locked by other program<br>
   * C type : Bln32
   */
  @Field(1)
  public EccInfo locked(int locked)
  {
    this.io.setIntField(this, 1, locked);
    return this;
  }

  public EccInfo() { super(); }

  public EccInfo(Pointer pointer) {
    super(pointer);
  }
}
